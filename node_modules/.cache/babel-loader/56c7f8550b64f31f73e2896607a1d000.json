{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\Documents\\\\DevWeb\\\\React\\\\movies-react-app\\\\src\\\\components\\\\MoviesGrid.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { MovieCard } from \"./MovieCard\";\nimport styles from \"../styles/MoviesGrid.module.css\";\nimport { get } from \"../utils/httpClient\";\nimport { Spinner } from \"./Spinner\";\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useQuery() {\n  return new URLS();\n}\n\nexport function MoviesGrid() {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const location = useLocation();\n  console.log(location);\n  useEffect(() => {\n    setIsLoading(true);\n    get(\"/discover/movie\").then(data => {\n      setMovies(data.results);\n      setIsLoading(false);\n    });\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: styles.moviesGrid,\n    children: movies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n      movie: movie\n    }, movie.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MoviesGrid, \"MQTNVYupVWwIlaRh3aQKM8IXtZ8=\", false, function () {\n  return [useLocation];\n});\n\n_c = MoviesGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviesGrid\");","map":{"version":3,"sources":["C:/Users/Tom/Documents/DevWeb/React/movies-react-app/src/components/MoviesGrid.js"],"names":["useEffect","useState","MovieCard","styles","get","Spinner","useLocation","useQuery","URLS","MoviesGrid","movies","setMovies","isLoading","setIsLoading","location","console","log","then","data","results","moviesGrid","map","movie","id"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,iCAAnB;AACA,SAASC,GAAT,QAAoB,qBAApB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;;;AAEA,SAASC,QAAT,GAAoB;AAChB,SAAO,IAAIC,IAAJ,EAAP;AACH;;AAED,OAAO,SAASC,UAAT,GAAsB;AAAA;;AACzB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAMa,QAAQ,GAAGR,WAAW,EAA5B;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAT,IAAAA,GAAG,CAAC,iBAAD,CAAH,CAAuBa,IAAvB,CAA6BC,IAAD,IAAU;AAClCP,MAAAA,SAAS,CAACO,IAAI,CAACC,OAAN,CAAT;AACAN,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAHD;AAIH,GANQ,EAMN,EANM,CAAT;;AAQA,MAAID,SAAJ,EAAe;AACX,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAET,MAAM,CAACiB,UAAvB;AAAA,cACKV,MAAM,CAACW,GAAP,CAAYC,KAAD,iBACR,QAAC,SAAD;AAA0B,MAAA,KAAK,EAAEA;AAAjC,OAAgBA,KAAK,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAzBed,U;UAIKH,W;;;KAJLG,U","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { MovieCard } from \"./MovieCard\";\r\nimport styles from \"../styles/MoviesGrid.module.css\";\r\nimport { get } from \"../utils/httpClient\";\r\nimport { Spinner } from \"./Spinner\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nfunction useQuery() {\r\n    return new URLS\r\n}\r\n\r\nexport function MoviesGrid() {\r\n    const [movies, setMovies] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const location = useLocation();\r\n    console.log(location)\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        get(\"/discover/movie\").then((data) => {\r\n            setMovies(data.results);\r\n            setIsLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    if (isLoading) {\r\n        return <Spinner/>\r\n    }\r\n    return (\r\n        <ul  className={styles.moviesGrid}>\r\n            {movies.map((movie) => (\r\n                <MovieCard key={movie.id} movie={movie}/>\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}